// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projekt.Models;

#nullable disable

namespace Projekt.Migrations
{
    [DbContext(typeof(ProjektDbContext))]
    [Migration("20240131133931_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Projekt.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A room assigned to one person. May have one or more beds",
                            Name = "Single"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A room assigned to two people. May have one or more beds",
                            Name = "Double"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A room that can accommodate three persons and has been fitted with three twin beds, one double bed and one twin bed or two double beds.",
                            Name = "Triple"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A room assigned to four people. May have two or more beds.",
                            Name = "Quad"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A room with two twin beds. May be occupied by one or more people.",
                            Name = "Twin"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A room with a studio bed - a couch which can be converted into a bed. May also have an additional bed.",
                            Name = "Studio"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A parlour or living room connected with to one or more bedrooms. (A room with one or more bedrooms and a separate living space.)",
                            Name = "Suite"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Rooms with individual entrance doors from the outside and a connecting door between. Guests can move between rooms without going through the hallway.",
                            Name = "Connecting rooms"
                        },
                        new
                        {
                            Id = 9,
                            Description = "This room type is mainly designed for disabled guests.",
                            Name = "Accessible Room"
                        });
                });

            modelBuilder.Entity("Projekt.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("WebApp.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Room class A",
                            Price = 300.0,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Room class B",
                            Price = 200.0,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Name = "Room class C",
                            Price = 150.0,
                            Quantity = 7
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Name = "Room class A",
                            Price = 600.0,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Name = "Room class B",
                            Price = 400.0,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Name = "Room class C",
                            Price = 300.0,
                            Quantity = 7
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Name = "Room class A",
                            Price = 900.0,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            Name = "Room class B",
                            Price = 600.0,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Name = "Room class C",
                            Price = 450.0,
                            Quantity = 7
                        });
                });

            modelBuilder.Entity("Projekt.Models.Category", b =>
                {
                    b.HasOne("Projekt.Models.Category", null)
                        .WithMany("Categories")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("WebApp.Models.Room", b =>
                {
                    b.HasOne("Projekt.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Projekt.Models.Category", b =>
                {
                    b.Navigation("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
